(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float 
 
 function first 
   :real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last 
   :real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  255
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  65535
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing The array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   :int =
  1
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int

 type component_type  = 
  Standard__character.character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string  = 
  __t
 
 function to_string 
   (x : Main.__image)  :string
 
 function from_string 
   (x : string)  :Main.__image
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int

 type component_type  = 
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function first 
   :Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   :Main.__fixed =
  9223372036854775807
 
 function inv_small 
   :Main.__fixed =
  1000000000
 
 predicate in_range
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for defining the constant "n" defined at maxandsum.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Maxandsum__n
 use import "_gnatprove_standard".Main
 use        Standard__natural

 function n "GP_CE_Relevant" 
   :Standard__natural.__split

end

(* Module for axiomatizing type "element" defined at maxandsum.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Maxandsum__element
 use import "_gnatprove_standard".Main
 use import "int".Int

 type element 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = element, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "TelementarrayC" defined at maxandsum.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Maxandsum__TelementarrayC
 use import "_gnatprove_standard".Main
 use import "int".Int

 type telementarrayC 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = telementarrayC, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "TelementarrayB" defined at maxandsum.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Maxandsum__TelementarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int
 use        Maxandsum__element
 use        Maxandsum__TelementarrayC

 type component_type  = 
  Maxandsum__TelementarrayC.telementarrayC
 
 function index_1_id 
   (x : int)  :int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Maxandsum__element.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type telementarrayB  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Maxandsum__TelementarrayC.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for axiomatizing type "elementarray" defined at maxandsum.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Maxandsum__elementarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int
 use        Maxandsum__TelementarrayC

 type component_type  = 
  Maxandsum__TelementarrayC.telementarrayC
 
 function first 
   :int =
  0
 
 function last 
   :int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int.map component_type, 
 function array_bool_eq = Array__Int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int
 
 type elementarray  = 
  __t
 
 function index_Index_one 
   :int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Maxandsum__TelementarrayC.to_rep, 
 type map = Array__Int.map component_type, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int.get, 
 function compare = Array__Int.compare, 
 function bool_eq = Array__Int.bool_eq

end

(* Module for defining the constant "a" defined at maxandsum.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Maxandsum__maxandsum__a
 use import "_gnatprove_standard".Main
 use        Maxandsum__elementarray

 function a 
   :Maxandsum__elementarray.elementarray

end

(* Module giving an empty axiom for the entity "a" defined at maxandsum.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maxandsum__maxandsum__a__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T1b" defined at maxandsum.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Maxandsum__maxandsum__L_1__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t1b 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  100
 
 predicate in_range
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end
(* Module for defining a ref holding the value of variable "sum" defined at maxandsum.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Maxandsum__maxandsum__sum
 use import "_gnatprove_standard".Main
 use        Standard__natural

 val sum "GP_CE_Relevant"  : ref Standard__natural.__split
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "sum" defined at maxandsum.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maxandsum__maxandsum__sum__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "max" defined at maxandsum.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Maxandsum__maxandsum__max
 use import "_gnatprove_standard".Main
 use        Maxandsum__element

 val max "GP_CE_Relevant"  : ref Maxandsum__element.__split
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "max" defined at maxandsum.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maxandsum__maxandsum__max__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at maxandsum.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Maxandsum__maxandsum__L_1__i
 use import "_gnatprove_standard".Main

 val i "GP_CE_Relevant"  : ref int
 
 function attr__ATTRIBUTE_ADDRESS "GP_CE_Relevant" 
   :int

end

(* Module giving an empty axiom for the entity "i" defined at maxandsum.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maxandsum__maxandsum__L_1__i__axiom
 use import "_gnatprove_standard".Main


end
(* Module for possibly declaring a logic function for "maxandsum" defined at maxandsum.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Maxandsum__maxandsum
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop"L_1" defined at maxandsum.adb:10, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Maxandsum__maxandsum__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at maxandsum.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maxandsum__maxandsum__L_1__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for the type entity "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "n" defined at maxandsum.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Maxandsum__n__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Maxandsum__n

 axiom n__def_axiom :
  ((Maxandsum__n.n ) = 100)

end

(* Module giving axioms for the type entity "element" defined at maxandsum.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maxandsum__element__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TelementarrayC" defined at maxandsum.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maxandsum__TelementarrayC__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TelementarrayB" defined at maxandsum.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maxandsum__TelementarrayB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "elementarray" defined at maxandsum.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maxandsum__elementarray__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T1b" defined at maxandsum.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maxandsum__maxandsum__L_1__T1b__axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "maxandsum" defined at maxandsum.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Maxandsum__maxandsum__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Maxandsum__element
 use        Maxandsum__elementarray

 val maxandsum 
   (a : Maxandsum__elementarray.elementarray) (sum : ref Standard__natural.__split) (max : ref Maxandsum__element.__split)  :unit
  requires { true }
  ensures { ( (!sum <= (100 * !max)) /\ ( (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last !sum) /\ (Maxandsum__element.dynamic_property Maxandsum__element.first Maxandsum__element.last !max) ) ) }
  writes {sum, max }


end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "maxandsum" defined at maxandsum.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Maxandsum__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__natural
 use        Maxandsum__n
 use        Standard__natural__axiom
 use        Maxandsum__n__axiom

 let def "GP_Subp:maxandsum.ads:1" "W:diverges:N" 
   (__void_param : unit) 
  requires { true }
  ensures { true }

   =
  ( abstract ensures {true}(Main.___ignore(100)) end ;
  assume { (if ((Standard__natural.first <= Standard__natural.last)) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last Maxandsum__n.n)) else true) };
  ( "GP_Sloc:maxandsum.adb:20:1" () ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "maxandsum" defined at maxandsum.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Maxandsum__maxandsum__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Array__Int
 use        Maxandsum__element
 use        Maxandsum__TelementarrayC
 use        Maxandsum__maxandsum__a
 use        Maxandsum__maxandsum__sum
 use        Maxandsum__maxandsum__max
 use        Maxandsum__maxandsum__L_1
 use        Maxandsum__maxandsum__L_1__i
 use        Standard__natural__axiom
 use        Standard__integer__axiom
 use        Maxandsum__maxandsum__L_1__i__axiom
 use        Maxandsum__maxandsum__L_1__axiom
 use        Maxandsum__element__axiom
 use        Maxandsum__elementarray__axiom
 use        Maxandsum__maxandsum__a__axiom
 use        Maxandsum__maxandsum__sum__axiom
 use        Maxandsum__maxandsum__max__axiom
 use        Maxandsum__TelementarrayC__axiom

 let def "W:diverges:N" "GP_Subp:maxandsum.ads:11" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "GP_Sloc:maxandsum.ads:12:19" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     with Post => Sum <= N * Max;
                  ^ maxandsum.ads:12:19:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "keep_on_simp" ( "GP_Pretty_Ada:2572" "GP_Sloc:maxandsum.ads:12:19" (!Maxandsum__maxandsum__sum.sum <= (100 * !Maxandsum__maxandsum__max.max)) ) ) }

   =
  ( ( () (* Assume dynamic property of params of the subprogram maxandsum.ads:11 *)
  ;
  assume { (if ((Standard__natural.first <= Standard__natural.last)) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last !Maxandsum__maxandsum__sum.sum)) else true) };
  assume { (if ((Maxandsum__element.first <= Maxandsum__element.last)) then (
   (Maxandsum__element.dynamic_property Maxandsum__element.first Maxandsum__element.last !Maxandsum__maxandsum__max.max)) else true) } );
  ( ( () (* Declarations introduced by the compiler at the beginning of the subprogram maxandsum.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram maxandsum.ads:11 *)
  ;
  abstract ensures {true}(Main.___ignore(True)) end ;
  () (* Assume Pre of the subprogram maxandsum.ads:11 *)
  ;
  assume { true } );
  ( () (* Check additional Pres of the subprogram maxandsum.ads:11 *)
  ;
  () (* Body of the subprogram maxandsum.ads:11 *)
  ;
  try
   ( ( "GP_Sloc:maxandsum.adb:8:11" Maxandsum__maxandsum__sum.sum := ( 0 ) );
   ( "GP_Sloc:maxandsum.adb:9:11" Maxandsum__maxandsum__max.max := ( 0 ) );
   ( "GP_Sloc:maxandsum.adb:10:23" (let temp___standard__maxandsum_0 = 1 in (
   (let temp___standard__maxandsum_1 = 100 in (
    ( Maxandsum__maxandsum__L_1__i.i := ( temp___standard__maxandsum_0 );
    () (* Translation of an Ada loop from maxandsum.adb:10 *)
    ;
    (if ((Boolean.andb((temp___standard__maxandsum_0 <= !Maxandsum__maxandsum__L_1__i.i)) ((!Maxandsum__maxandsum__L_1__i.i <= temp___standard__maxandsum_1)))) then (
     try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop maxandsum.adb:10 *)
      ;
      () (* While loop translating the Ada loop from maxandsum.adb:10 *)
      ;
      while True do
       invariant { 
        ( "keep_on_simp" "GP_Shape:L_1_while" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:3" "GP_Sloc:maxandsum.adb:11:10" "comment:         pragma Loop_Invariant (Sum <= (I - 1) * Max);
         ^ maxandsum.adb:11:10:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2370" "GP_Sloc:maxandsum.adb:11:33" (!Maxandsum__maxandsum__sum.sum <= ((!Maxandsum__maxandsum__L_1__i.i - 1) * !Maxandsum__maxandsum__max.max)) ) )
        }
       ( ( () (* Assume implicit invariants from the loop maxandsum.adb:10 *)
       ;
       assume { (Boolean.andb((Boolean.andb((if ((Standard__natural.first <= Standard__natural.last)) then (
        (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last !Maxandsum__maxandsum__sum.sum)) else true)) ((if ((Maxandsum__element.first <= Maxandsum__element.last)) then (
        (Maxandsum__element.dynamic_property Maxandsum__element.first Maxandsum__element.last !Maxandsum__maxandsum__max.max)) else true)))) (( (1 <= !Maxandsum__maxandsum__L_1__i.i) /\ (!Maxandsum__maxandsum__L_1__i.i <= 100) ))) };
       () (* Check for absence of RTE in the invariant of loop maxandsum.adb:10 *)
       ;
       abstract ensures {true}(Main.___ignore((!Maxandsum__maxandsum__sum.sum <= ((!Maxandsum__maxandsum__L_1__i.i - 1) * !Maxandsum__maxandsum__max.max)))) end  );
       ( () (* Loop statements appearing after the loop invariant of loop maxandsum.adb:10 *)
       ;
       ( "GP_Sloc:maxandsum.adb:12:14" Maxandsum__maxandsum__sum.sum := ( ( "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:1" "GP_Sloc:maxandsum.adb:12:21" "comment:         Sum := Sum + A (I);
                    ^ maxandsum.adb:12:21:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__sum_assign__add" (Standard__integer.range_check_((!Maxandsum__maxandsum__sum.sum + (Maxandsum__TelementarrayC.to_rep((Array__Int.get(Maxandsum__maxandsum__a.a) (!Maxandsum__maxandsum__L_1__i.i))))))) ) ) );
       ( "GP_Sloc:maxandsum.adb:13:10" (if ((!Maxandsum__maxandsum__max.max < (Maxandsum__TelementarrayC.to_rep((Array__Int.get(Maxandsum__maxandsum__a.a) (!Maxandsum__maxandsum__L_1__i.i)))))) then (
        ( "GP_Sloc:maxandsum.adb:14:17" Maxandsum__maxandsum__max.max := ( (Maxandsum__TelementarrayC.to_rep((Array__Int.get(Maxandsum__maxandsum__a.a) (!Maxandsum__maxandsum__L_1__i.i)))) ) )) else (
        ())) );
       ( "GP_Sloc:maxandsum.adb:16:10" ( abstract ensures {true}(Main.___ignore((!Maxandsum__maxandsum__sum.sum <= (!Maxandsum__maxandsum__L_1__i.i * !Maxandsum__maxandsum__max.max)))) end ;
       assert { ( "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Id:2" "GP_Sloc:maxandsum.adb:16:10" "comment:         pragma Assert (Sum <= I * Max);
         ^ maxandsum.adb:16:10:VC_ASSERT" "GP_Shape:L_1_while" ( "GP_Pretty_Ada:2401" "GP_Sloc:maxandsum.adb:16:25" (!Maxandsum__maxandsum__sum.sum <= (!Maxandsum__maxandsum__L_1__i.i * !Maxandsum__maxandsum__max.max)) ) ) } ) );
       Maxandsum__maxandsum__L_1__i.i := ( (!Maxandsum__maxandsum__L_1__i.i + 1) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop maxandsum.adb:10 *)
       ;
       (if ((!Maxandsum__maxandsum__L_1__i.i <= temp___standard__maxandsum_1)) then (
        ()) else (
        raise Maxandsum__maxandsum__L_1.L_1)) ) )
      done )
     with
      Maxandsum__maxandsum__L_1.L_1 -> ()
     end)) )))
   ))
    );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* Check additional Posts and RTE in Post of the subprogram maxandsum.ads:11 *)
  ;
  abstract ensures {true}(Main.___ignore((!Maxandsum__maxandsum__sum.sum <= (100 * !Maxandsum__maxandsum__max.max)))) end  ) ) )
end
